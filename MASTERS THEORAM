Master Theorem
Recommended Course
Algorithms (2019)
This Brilliant course is retiring soon. Check out our new course: Algorithm Fundamentals!

Relevant For...
Computer Science>
Complexity / Runtime Analysis
Computer Science>
Dynamic Programming
Lawrence Chiou, Agnishom Chattopadhyay, Geoff Pilling, and 4 others contributed
The master theorem provides a solution to recurrence relations of the form

T(n) = a T\left(\frac nb\right) + f(n),
T(n)=aT( 
b
n
​
 )+f(n),

for constants a \geq 1a≥1 and b > 1b>1 with ff asymptotically positive. Such recurrences occur frequently in the runtime analysis of many commonly encountered algorithms.

Contents
Introduction
Statement of the Master Theorem
Examples
See Also
References
Introduction
Many algorithms have a runtime of the form

T(n) = a T\left(\frac nb\right) + f(n),
T(n)=aT( 
b
n
​
 )+f(n),

where nn is the size of the input and a \, (\geq 1)a(≥1) and b \,( > 1)b(>1) are constants with ff asymptotically positive. For instance, one can show that runtime of the merge sort algorithm satisfies

T(n) = 2T\left(\frac n2\right) + n.
T(n)=2T( 
2
n
​
 )+n.

Similarly, traversing a binary tree takes time

T(n) = 2 T\left(\frac n2\right) + O(1).
T(n)=2T( 
2
n
​
 )+O(1).

By comparing \log_b{a}log 
b
​
 a to the asymptotic behavior of f(n)f(n), the master theorem provides a solution to many frequently seen recurrences.

Statement of the Master Theorem
First, consider an algorithm with a recurrence of the form

T(n) = a T\left(\frac nb\right),
T(n)=aT( 
b
n
​
 ),

where aa represents the number of children each node has, and the runtime of each of the three initial nodes is the runtime of T\left(\frac nb\right)T( 
b
n
​
 ).

The tree has a depth of \log _b nlog 
b
​
 n and depth ii contains a^ia 
i
  nodes. So there are a ^ {\log _b n} = n ^ {\log _b a}a 
log 
b
​
 n
 =n 
log 
b
​
 a
  leaves, and hence the runtime is \Theta\left(n^{\log_b{a}}\right)Θ(n 
log 
b
​
 a
 ).



Intuitively, the master theorem argues that if an asymptotically positive function ff is added to the recurrence so that one instead has

T(n) = a T\left(\frac nb\right) + f(n),
T(n)=aT( 
b
n
​
 )+f(n),

it is possible to determine the asymptotic form of TT based on a relative comparison between ff and n^{\log_b{a}}n 
log 
b
​
 a
 .

Master Theorem

Given a recurrence of the form

T(n) = a T\left(\frac nb\right) + f(n),
T(n)=aT( 
b
n
​
 )+f(n),

for constants a\,( \geq 1)a(≥1) ) and b\,( > 1)b(>1) with ff asymptotically positive, the following statements are true:

Case 1. If f(n) = O\left(n^{\log_b{a} - \epsilon}\right)f(n)=O(n 
log 
b
​
 a−ϵ
 ) for some \epsilon > 0ϵ>0, then T(n) = \Theta\left(n^{\log_b{a}}\right)T(n)=Θ(n 
log 
b
​
 a
 ).

Case 2. If f(n) = \Theta\left(n^{\log_b{a}}\right)f(n)=Θ(n 
log 
b
​
 a
 ), then T(n) = \Theta\left(n^{\log_b{a}} \log{n} \right)T(n)=Θ(n 
log 
b
​
 a
 logn).

Case 3. If f(n) = \Omega\left(n^{\log_b{a} + \epsilon}\right)f(n)=Ω(n 
log 
b
​
 a+ϵ
 ) for some \epsilon > 0ϵ>0 \big((and af\big(\frac nb\big) \leq c f(n)af( 
b
n
​
 )≤cf(n) for some c < 1c<1 for all nn sufficiently large\big),), then T(n) = \Theta\big(f(n)\big)T(n)=Θ(f(n)).

Simply put, if f(n)f(n) is polynomially smaller than n^{\log_b{a}}n 
log 
b
​
 a
 , then n^{\log_b{a}}n 
log 
b
​
 a
  dominates, and the runtime is \Theta\left(n^{\log_b{a}}\right)Θ(n 
log 
b
​
 a
 ). If f(n)f(n) is instead polynomially larger than n^{\log_b{a}}n 
log 
b
​
 a
 , then f(n)f(n) dominates, and the runtime is \Theta\big(f(n)\big)Θ(f(n)). Finally, if f(n)f(n) and n^{\log_b{a}}n 
log 
b
​
 a
  are asymptotically the same, then T(n) = \Theta\left(n^{\log_b{a}} \log{n} \right)T(n)=Θ(n 
log 
b
​
 a
 logn).

Note that the master theorem does not provide a solution for all ff. In particular, if ff is smaller or larger than n^{\log_b{a}}n 
log 
b
​
 a
  by less than a polynomial factor, then none of the three cases are satisfied. For instance, consider the recurrence

T(n) = 3 T\left(\frac n3\right) + n \log{n}.
T(n)=3T( 
3
n
​
 )+nlogn.

In this case, n^{\log_b{a}} = nn 
log 
b
​
 a
 =n. While ff is asymptotically larger than nn, it is larger only by a logarithmic factor; it is not the case that f(n) = O\left(n^{\log_b{a} - \epsilon}\right)f(n)=O(n 
log 
b
​
 a−ϵ
 ) for some \epsilon > 0ϵ>0. Therefore, the master theorem makes no claim about the solution to this recurrence.

Examples
As mentioned in the introduction, the mergesort algorithm has runtime

T(n) = 2T\left(\frac n2\right) + n.
T(n)=2T( 
2
n
​
 )+n.

n^{\log_b{a}} = nn 
log 
b
​
 a
 =n and f(n) = nf(n)=n, so case 2 of the master theorem gives T(n) = \Theta\left(n^{\log_b{a}} \log{n} \right) = \Theta\left(n \log{n}\right)T(n)=Θ(n 
log 
b
​
 a
 logn)=Θ(nlogn).

Similarly, as mentioned before, traversing a binary tree takes time

T(n) = 2 T\left(\frac n2\right) + O(1).
T(n)=2T( 
2
n
​
 )+O(1).

n^{\log_b{a}} = nn 
log 
b
​
 a
 =n, which is asymptotically larger than a constant factor, so case 1 of the master theorem gives T(n) = \Theta\left(n^{\log_b{a}}\right) = \Theta\left(n\right)T(n)=Θ(n 
log 
b
​
 a
 )=Θ(n).

Consider the recurrence

T(n) = 9 T\left(\frac n3\right) + n.
T(n)=9T( 
3
n
​
 )+n.

In this case, n^{\log_b{a}} = n^2n 
log 
b
​
 a
 =n 
2
  and f(n) = nf(n)=n. Since f(n)f(n) is polynomially smaller than n^{\log_b{a}}n 
log 
b
​
 a
 , case 1 of the master theorem implies that T(n) = \Theta\left(n^2\right)T(n)=Θ(n 
2
 ).

Consider the recurrence

T(n) = 27 T\left(\frac n3\right) + n^3.
T(n)=27T( 
3
n
​
 )+n 
3
 .

In this case, n^{\log_b{a}} = n^3n 
log 
b
​
 a
 =n 
3
  and f(n) = n^3f(n)=n 
3
 . Since f(n)f(n) is asymptotically the same as n^{\log_b{a}}n 
log 
b
​
 a
 , case 2 of the master theorem implies that T(n) = \Theta\left(n^3 \log{n} \right)T(n)=Θ(n 
3
 logn).

Consider the recurrence

T(n) = 2 T\left(\frac n2\right) + n^2.
T(n)=2T( 
2
n
​
 )+n 
2
 .

In this case, n^{\log_b{a}} = nn 
log 
b
​
 a
 =n and f(n) = n^2f(n)=n 
2
 . Since f(n)f(n) is asymptotically larger than n^{\log_b{a}}n 
log 
b
​
 a
 , case 3 of the master theorem asks us to check whether af\left(\frac nb\right) \leq c f(n)af( 
b
n
​
 )≤cf(n) for some c < 1c<1 and all nn sufficiently large. This is indeed the case, so T(n) = \Theta\big(f(n)\big) = \Theta\left( n^2 \right)T(n)=Θ(f(n))=Θ(n 
2
 ).

Consider the recurrence

T(n) = 8 T\left(\frac n2\right) + \frac{n^3}{\log{n}}.
T(n)=8T( 
2
n
​
 )+ 
logn
n 
3
 
​
 .

In this case, n^{\log_b{a}} = n^3n 
log 
b
​
 a
 =n 
3
  and f(n) = \frac{n^3}{\log{n}}f(n)= 
logn
n 
3
 
​
 . f(n)f(n) is smaller than n^{\log_b{a}}n 
log 
b
​
 a
  but by less than a polynomial factor. Therefore, the master theorem makes no claim about the solution to the recurrence.

See Also
